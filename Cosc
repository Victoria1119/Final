import java.util.*;

// Interface
public interface Controllable {
    void powerOn();
    void powerOff();
}

// Abstract class
public abstract class Device implements Controllable {
    String name;
    boolean power;

    public Device(String name) {
        this.name = name;
        this.power = false;
    }

    public String getName() { return name; }

    public boolean mode() { return power; }

    @Override
    public void powerOn() {
        power = true;
        System.out.println(name + " is on.");
    }

    @Override
    public void powerOff() {
        power = false;
        System.out.println(name + " is off.");
    }

    public abstract String deviceInformation();
}

// Light class
public class Light extends Device {
    int setting;
    String color;

    public Light(String name) {
        super(name);
        this.setting = 5;
        this.color = "White";
    }

    public void setSetting(int num) {
        this.setting = Math.max(0, Math.min(10, num));
        System.out.println(name + " setting: " + setting);
    }

    public void setColor(String color) {
        this.color = color;
        System.out.println(name + " color: " + color);
    }

    public String getColor() { return color; }

    @Override
    public String deviceInformation() {
        return name + " | Setting: " + setting + ", Color: " + color + ", Power: " + (power ? "On" : "Off");
    }
}

// Thermostat class
public class Thermostat extends Device {
    int temp;

    public Thermostat(String name) {
        super(name);
        this.temp = 60;
    }

    public void setTemp(int temp) {
        this.temp = temp;
        System.out.println(name + " temperature set to: " + temp);
    }

    @Override
    public String deviceInformation() {
        return name + " | Temperature: " + temp + ", Power: " + (power ? "On" : "Off");
    }
}

// Room class
class Room {
    String roomName;
    List<Device> devices;

    public Room(String name) {
        this.roomName = name;
        this.devices = new ArrayList<>();
    }

    public void addDevice(Device device) {
        devices.add(device);
        System.out.println("Added " + device.getName() + " to " + roomName);
    }

    public void showDevices() {
        System.out.println("Devices in " + roomName + ":");
        for (Device d : devices) {
            System.out.println(d.deviceInformation());
        }
    }

    public String getRoomName() {
        return roomName;
    }
}

// Main application
public class SmartHome {
    public static void main(String[] args) {
        // Stack to manage rooms
        Stack<Room> roomStack = new Stack<>();

        // Room 1
        Room livingRoom = new Room("Living Room");
        livingRoom.addDevice(new Light("Ceiling Light"));
        livingRoom.addDevice(new Thermostat("Nest Thermostat"));
        roomStack.push(livingRoom);  // Push to stack
        System.out.println("Room added: " + livingRoom.getRoomName());

        // Room 2
        Room bedroom = new Room("Bedroom");
        bedroom.addDevice(new Light("Bedside Lamp"));
        roomStack.push(bedroom);  // Push to stack
        System.out.println("Room added: " + bedroom.getRoomName());

        // Peek top of the stack
        System.out.println("\nCurrent (top) room:");
        Room currentRoom = roomStack.peek();  // Peek does not remove
        currentRoom.showDevices();

        // Pop room from the stack
        System.out.println("\nUndoing room addition...");
        Room removedRoom = roomStack.pop();  // Removes the top room
        System.out.println("Room removed: " + removedRoom.getRoomName());

        // Show current room after pop
        System.out.println("\nNow viewing:");
        roomStack.peek().showDevices();
    }
}
